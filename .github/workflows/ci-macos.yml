# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: Windows - CI Build/Test
inputs:
  vulkan_sdk_version:
    description: If installing the SDK, which version to install
    default: 1.3.280.1
on:
  push:
    branches: [ "macos" ]
  pull_request:
    branches: [ "macos" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [macos-latest]
        build_type: [Release]
        c_compiler: [clang]
        include:
          - os: macos-latest
            c_compiler: clang
            cpp_compiler: clang++
    env:
      VULKAN_SDK: C:\VulkanSDK\

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: 'true'

    - name: Install python
      uses: actions/setup-python@v4
      with:
        python-version: 3.8

    - name: Install dependencies
      run: |
          wget "https://sdk.lunarg.com/sdk/download/${{ inputs.vulkan_sdk_version }}/mac/vulkansdk-macos-${{ inputs.vulkan_sdk_version }}.dmg?Human=true" -O vulkansdk.dmg
          hdiutil attach vulkansdk.dmg
          sudo /Volumes/vulkansdk-macos-${{ inputs.vulkan_sdk_version }}/InstallVulkan.app/Contents/MacOS/InstallVulkan --root $GITHUB_WORKSPACE/vulkansdk-macos-${{ inputs.vulkan_sdk_version }} --accept-licenses --default-answer --confirm-command install
          hdiutil detach /Volumes/vulkansdk-macos-${{ inputs.vulkan_sdk_version }}
          echo "VULKAN_SDK_PATH=$GITHUB_WORKSPACE/vulkansdk-macos-${{ inputs.vulkan_sdk_version }}" >> $GITHUB_ENV
          echo "VULKAN_SDK=$VULKAN_SDK_PATH/macOS" >> $GITHUB_ENV
          echo "DYLD_LIBRARY_PATH=$VULKAN_SDK/lib:$DYLD_LIBRARY_PATH" >> $GITHUB_ENV
          echo "PATH=$VULKAN_SDK/bin:$PATH" >> $GITHUB_ENV
          echo $GITHUB_ENV

    - name: Install PreVEngine dependencies
      run: |
          python3 -m pip install -U pip
          pip3 install requests
          python3 Scripts/download_dependencies.py

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    # - name: Create Artifact
    #   run: |
    #     mkdir build-win32
    #     cp -r ${{ steps.strings.outputs.build-output-dir }}/PreVEngineTest/assets build-macos
    #     cp -r ${{ steps.strings.outputs.build-output-dir }}/PreVEngineTest/Release/PreVEngineTest.exe build-win32
    #     cp -r ${{ steps.strings.outputs.build-output-dir }}/PreVEngineTest/*.dll build-win32

    # - name: Publish Artifact
    #   uses: actions/upload-artifact@v4
    #   with:
    #     name: build-win32
    #     path: build-win32

    # - name: Test
    #   working-directory: ${{ steps.strings.outputs.build-output-dir }}
    #   # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
    #   # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
    #   run: ctest --build-config ${{ matrix.build_type }}

