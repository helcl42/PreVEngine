# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: Linux (Wayland) - CI Build/Test

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-latest]
        build_type: [Release]
        c_compiler: [gcc, clang]
        include:
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: 'true'

    - name: Install python
      uses: actions/setup-python@v5
      with:
        python-version: 3.12.2

    - name: Install dependencies
      run: |
          wget -qO- https://packages.lunarg.com/lunarg-signing-key-pub.asc | sudo tee /etc/apt/trusted.gpg.d/lunarg.asc
          sudo wget -qO /etc/apt/sources.list.d/lunarg-vulkan-noble.list http://packages.lunarg.com/vulkan/lunarg-vulkan-noble.list
          sudo apt update
          sudo apt-get install -y vulkan-sdk libminizip-dev libstdc++6 libc6-dev build-essential libwayland-dev

    - name: Install PreVEngine dependencies
      run: |
          python3 -m pip install -U pip
          pip3 install requests
          python3 Scripts/download_dependencies.py

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Compile Shaders
      run: |
        python3 Scripts/compile_shaders.py --input_folder PreVEngineTest/assets/Shaders/ --output_folder ${{ steps.strings.outputs.build-output-dir }}/PreVEngineTest/assets/Shaders/ --compile_serial --compiler_args '-DMAX_VIEW_COUNT=1 ' --force_compile_all

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -DENABLE_XCB=OFF
        -DENABLE_WAYLAND=ON
        -S ${{ github.workspace }}

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Create Artifact
      run: |
        mkdir build-linux-wayland-${{ matrix.c_compiler }}
        cp -r ${{ steps.strings.outputs.build-output-dir }}/PreVEngineTest/assets build-linux-wayland-${{ matrix.c_compiler }}
        cp -r ${{ steps.strings.outputs.build-output-dir }}/PreVEngineTest/PreVEngineTest build-linux-wayland-${{ matrix.c_compiler }}
        cp -r ${{ steps.strings.outputs.build-output-dir }}/PreVEngineTest/*.so build-linux-wayland-${{ matrix.c_compiler }}

    - name: Publish Artifact
      uses: actions/upload-artifact@v4
      with:
        name: build-linux-wayland-${{ matrix.c_compiler }}
        path: build-linux-wayland-${{ matrix.c_compiler }}
