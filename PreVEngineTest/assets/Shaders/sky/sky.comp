#version 450

layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

layout(binding = 0, rgba8) uniform image2D outFragColor;
layout(binding = 1, rgba8) uniform image2D outBloom;
layout(binding = 2, rgba8) uniform image2D outAlphaness;
layout(binding = 3, r32f) uniform image2D outCloudDistance;

layout(binding = 4) uniform sampler3D perlinNoiseTex;
layout(binding = 5) uniform sampler2D weatherTex;

layout(std140, binding = 6) uniform UniformBufferObject {
	vec4 resolution;

	mat4 projectionMatrix;
	mat4 inverseProjectionMatrix;
	mat4 viewMatrix;
	mat4 inverseViewMatrix;

	vec4 lightColor;
	vec4 lightDirection;
	vec4 cameraPosition;

	vec4 baseCloudColor;
	vec4 skyColorBottom;
	vec4 skyColorTop;
	vec4 windDirection;

	float time;
	float coverageFactor;
	float cloudSpeed;
	float crispiness;

	float absorption;
	float curliness;
	uint enablePowder;
	float densityFactor;

	float earthRadius;
	float sphereInnerRadius;
	float sphereOuterRadius;
	float cloudTopOffset;
} uboCS;

// Cone sampling random offsets
const vec3 noiseKernel[6u] = vec3[]
(
	vec3( 0.38051305,  0.92453449, -0.02111345),
	vec3(-0.50625799, -0.03590792, -0.86163418),
	vec3(-0.32509218, -0.94557439,  0.01428793),
	vec3( 0.09026238, -0.27376545,  0.95755165),
	vec3( 0.28128598,  0.42443639, -0.86065785),
	vec3(-0.16852403,  0.14748697,  0.97460106)
);

#define BAYER_FACTOR 1.0/16.0
const float bayerFilter[16u] = float[]
(
	0.0 * BAYER_FACTOR, 8.0 * BAYER_FACTOR, 2.0 * BAYER_FACTOR, 10.0 * BAYER_FACTOR,
	12.0 * BAYER_FACTOR, 4.0 * BAYER_FACTOR, 14.0 * BAYER_FACTOR, 6.0 * BAYER_FACTOR,
	3.0 * BAYER_FACTOR, 11.0 * BAYER_FACTOR, 1.0 * BAYER_FACTOR, 9.0 * BAYER_FACTOR,
	15.0 * BAYER_FACTOR, 7.0 * BAYER_FACTOR, 13.0 * BAYER_FACTOR, 5.0 * BAYER_FACTOR
);

// Cloud types height density gradients
const vec4 statusGradient = vec4(0.0, 0.1, 0.2, 0.3);
const vec4 stratoCumusGradient = vec4(0.02, 0.2, 0.48, 0.625);
const vec4 cumulusGradient = vec4(0.00, 0.1625, 0.88, 0.98);

const float cloudsMinTransmitance = 0.1;

float HG(in float sunDotRayDirection, in float g)
{
	float gg = g * g;
	return (1.0 - gg) / pow(1.0 + gg - 2.0 * g * sunDotRayDirection, 1.5);
}

bool RaySphereIntersection(in vec3 rayStartPosition, in vec3 rayDirection, in vec3 sphereCenter, in float radius, out vec3 intersectionPoint)
{
	const float radius2 = radius * radius;
	vec3 L = rayStartPosition - sphereCenter;
	float a = dot(rayDirection, rayDirection);
	float b = 2.0 * dot(rayDirection, L);
	float c = dot(L, L) - radius2;

	float discr = b * b - 4.0 * a * c;
	if(discr < 0.0) 
	{ 
		return false;
	}

	float t = max(0.0, (-b + sqrt(discr)) / 2);
	if(t == 0.0)
	{
		return false;
	}

	intersectionPoint = rayStartPosition + rayDirection * t;

	return true;
}

float GetHeightFraction(in vec3 inPos)
{
	const vec3 sphereCenter = vec3(uboCS.cameraPosition.x, -uboCS.earthRadius, uboCS.cameraPosition.z);
	return (length(inPos - sphereCenter) - uboCS.sphereInnerRadius) / (uboCS.sphereOuterRadius - uboCS.sphereInnerRadius);
}

float Remap(in float originalValue, in float originalMin, in float originalMax, in float newMin, in float newMax)
{
	return newMin + (((originalValue - originalMin) / (originalMax - originalMin)) * (newMax - newMin));
}

float GetDensityForCloud(in float heightFraction, in float cloudType)
{
	const float stratusFactor = 1.0 - clamp(cloudType * 2.0, 0.0, 1.0);
	const float stratoCumulusFactor = 1.0 - abs(cloudType - 0.5) * 2.0;
	const float cumulusFactor = clamp(cloudType - 0.5, 0.0, 1.0) * 2.0;

	const vec4 baseGradient = stratusFactor * statusGradient + stratoCumulusFactor * stratoCumusGradient + cumulusFactor * cumulusGradient;

	// gradicent computation (see Siggraph 2017 Nubis-Decima talk)
	//return Remap(heightFraction, baseGradient.x, baseGradient.y, 0.0, 1.0) * Remap(heightFraction, baseGradient.z, baseGradient.w, 1.0, 0.0);
	return smoothstep(baseGradient.x, baseGradient.y, heightFraction) - smoothstep(baseGradient.z, baseGradient.w, heightFraction);
}

vec2 GetUVProjection(in vec3 inPos)
{
	return inPos.xz / uboCS.sphereInnerRadius + 0.5;
}

float SampleCloudDensity(in vec3 inPos, in bool expensive, in float lod)
{
	const float heightFraction = GetHeightFraction(inPos);
	const vec3 animation = heightFraction * uboCS.windDirection.xyz * uboCS.cloudTopOffset + uboCS.windDirection.xyz * uboCS.time * uboCS.cloudSpeed;
	const vec2 uv = GetUVProjection(inPos);
	const vec2 movingUV = GetUVProjection(inPos + animation);

	if(heightFraction < 0.0 || heightFraction > 1.0)
	{
		return 0.0;
	}

	const vec3 noiseScaler = vec3(0.625, 0.25, 0.125);
	vec4 lowFrequencyNoise = textureLod(perlinNoiseTex, vec3(uv * uboCS.crispiness, heightFraction), lod);
	float lowFreqFBM = dot(lowFrequencyNoise.gba, noiseScaler);
	float baseCloud = Remap(lowFrequencyNoise.r, -(1.0 - lowFreqFBM), 1.0, 0.0, 1.0);

	float density = GetDensityForCloud(heightFraction, 1.0);
	baseCloud *= (density / heightFraction);

	vec3 weatherData = texture(weatherTex, movingUV).rgb;
	float cloudCoverage = weatherData.r * uboCS.coverageFactor;
	float baseCloudWithCoverage = Remap(baseCloud, cloudCoverage, 1.0, 0.0, 1.0);
	baseCloudWithCoverage *= cloudCoverage;

	if(expensive)
	{
		vec3 erodeCloudNoise = textureLod(perlinNoiseTex, vec3(movingUV * uboCS.crispiness, heightFraction) * uboCS.curliness, lod).rgb;
		float highFreqFBM = dot(erodeCloudNoise.rgb, noiseScaler);
		float highFreqNoiseModifier = mix(highFreqFBM, 1.0 - highFreqFBM, clamp(heightFraction * 10.0, 0.0, 1.0));

		baseCloudWithCoverage = baseCloudWithCoverage - highFreqNoiseModifier * (1.0 - baseCloudWithCoverage);
		baseCloudWithCoverage = Remap(baseCloudWithCoverage * 2.0, highFreqNoiseModifier * 0.2, 1.0, 0.0, 1.0);
	}

	return clamp(baseCloudWithCoverage, 0.0, 1.0);
}

float GetPowder(in float density)
{
	return (1.0 - exp(-2.0 * density));
}

float RaymarchToLight(in vec3 inPos, in float stepSize, in vec3 lightDir, in float originalDensity, in float lightDotEye)
{
	const float ds = stepSize * 6.0;
	const vec3 rayStep = lightDir * ds;
	const float coneStep = 1.0 / 6.0;
	const float sigmaDs = -ds * uboCS.absorption;

	float coneRadius = 1.0;
	float density = 0.0;
	vec3 startPos = inPos;
	float T = 1.0;
	for(int i = 0; i < 6; i++)
	{
		vec3 pos = startPos + coneRadius * noiseKernel[i] * float(i);
		float heightFraction = GetHeightFraction(pos);
		if(heightFraction >= 0)
		{
			float cloudDensity = SampleCloudDensity(pos, density > 0.3, i / 16);
			if(cloudDensity > 0.0)
			{
				float Ti = exp(cloudDensity * sigmaDs);
				T *= Ti;
				density += cloudDensity;
			}
		}
		startPos += rayStep;
		coneRadius += coneStep;
	}
	return T;
}

struct RaymarchToCloudResult {
	bool hit;
	vec3 position;
	vec4 color;
};

RaymarchToCloudResult CreateDefaultRaymarchToCloudResult()
{
	RaymarchToCloudResult result;
	result.hit = false;
	result.position = vec3(1e12, 1e12, 1e12);
	result.color = vec4(0.0);
	return result;
}

RaymarchToCloudResult RaymarchToCloud(in vec3 startPos, in vec3 endPos, in vec3 bg)
{
	const int countOfSteps = 64;
	const vec3 path = endPos - startPos;
	const float pathLength = length(path);
	const float step = pathLength / countOfSteps;
	const vec3 dir = normalize(path);
	const vec3 stepVector = dir * step;

	uvec2 fragCoord = gl_GlobalInvocationID.xy;
	int a = int(fragCoord.x) % 4;
	int b = int(fragCoord.y) % 4;
	vec3 pos = startPos + stepVector * bayerFilter[a * 4 + b];
	float density = 0.0;
	float lightDotEye = dot(normalize(uboCS.lightDirection.xyz), dir);

	float T = 1.0;
	float sigmaDs = -step * uboCS.densityFactor;

	RaymarchToCloudResult result = CreateDefaultRaymarchToCloudResult();
	for(int i = 0; i < countOfSteps; i++)
	{
		float densitySample = SampleCloudDensity(pos, true, i / 16);
		if(densitySample > 0.0)
		{
			if(!result.hit)
			{
				result.position = pos;
				result.hit = true;
			}

			// float height = GetHeightFraction(pos);
			vec3 ambientLight = uboCS.baseCloudColor.xyz; // TODO ??
			float lightDensity = RaymarchToLight(pos, step * 0.1, uboCS.lightDirection.xyz, densitySample, lightDotEye);
			float scattering = mix(HG(lightDotEye, -0.08), HG(lightDotEye, 0.08), clamp(lightDotEye * 0.5 + 0.5, 0.0, 1.0));
			scattering = max(scattering, 1.0);
			float powderTerm = 1.0;
			if(uboCS.enablePowder == 1)
			{
				powderTerm = GetPowder(densitySample);
			}
			vec3 S = 0.6 * mix(mix(ambientLight * 1.8, bg, 0.2), scattering * uboCS.lightColor.rgb, powderTerm * lightDensity) * densitySample;
			float dTrans = exp(densitySample * sigmaDs);
			vec3 Sint = (S - S * dTrans) * (1.0 / densitySample);
			result.color.rgb += T * Sint;
			T *= dTrans;
		}

		if(T <= cloudsMinTransmitance)
		{
			break;
		}

		pos += stepVector;
	}

	result.color.a = 1.0 - T;

	return result;
}

float ComputeFogAmount(in vec3 startPos, in float factor)
{
	const vec3 sphereCenter = vec3(uboCS.cameraPosition.x, -uboCS.earthRadius, uboCS.cameraPosition.z);
	float dist = length(startPos - uboCS.cameraPosition.xyz);
	float radius = (uboCS.cameraPosition.y - sphereCenter.y) * 0.3;
	float alpha = dist / radius;
	return 1.0 - exp(-dist * alpha * factor);
}

vec3 GetSunColor(in vec3 worldRayDirection, in float powExp)
{
	const vec3 sunColor = vec3(1.0, 0.6, 0.1);
	float sun = clamp(dot(uboCS.lightDirection.xyz, worldRayDirection), 0.0, 1.0);
	vec3 col = 0.8 * sunColor * pow(sun, powExp);
	return col;
}

vec3 GetCubeMapColor(in vec3 worldRayDirection)
{
	const float transitionSharpness = 0.07;
	const float transitionRatio = smoothstep(-transitionSharpness, transitionSharpness, worldRayDirection.y);

	const vec3 color = mix(uboCS.skyColorBottom.xyz, uboCS.skyColorTop.xyz, transitionRatio);
	return color;
}

vec4 GetBackgroundColor(in vec3 worldRayDirection)
{
	vec3 backgroundColor = GetCubeMapColor(worldRayDirection);
	vec3 sunColor = GetSunColor(worldRayDirection, 350.0);
	vec3 finalColor = backgroundColor + sunColor;
	return vec4(finalColor, 1.0);
}

vec4 ComputeClipSpaceDirection(in ivec2 fragCoord)
{
	vec2 normalizedFragCoord = vec2(fragCoord.xy) / uboCS.resolution.xy;
	vec2 rayNds = 2.0 * normalizedFragCoord - 1.0;
	return vec4(rayNds, 1.0, 0.0);
}

vec4 ComputeViewSpaceDirection(in vec4 clipSpaceDir)
{
	vec4 rayView = uboCS.inverseProjectionMatrix * clipSpaceDir;
	return vec4(rayView.xy, -1.0, 0.0);
}

vec3 ComputeWorldSpaceDirection(in vec4 viewSpaceDir)
{
	vec3 worldDir = (uboCS.inverseViewMatrix * viewSpaceDir).xyz;
	return normalize(worldDir);
}

float ComputeDepth(in vec3 p)
{
    // https://iquilezles.org/articles/raypolys/
    vec4 pInClipSpace = uboCS.projectionMatrix * uboCS.viewMatrix * vec4(p, 1.0);
    vec3 pInNDC = pInClipSpace.xyz / pInClipSpace.w;
    float depth = pInNDC.z;
    return depth;
}

void main()
{
	ivec2 fragCoord = ivec2(gl_GlobalInvocationID.xy);

	// compute ray direction in world space
	vec4 clipDir = ComputeClipSpaceDirection(fragCoord);
	vec4 viewDir = ComputeViewSpaceDirection(clipDir);	
	vec3 worldDir = ComputeWorldSpaceDirection(viewDir);
	
	// compute background color
	vec4 backgroundColor = GetBackgroundColor(worldDir);

	// compute raymarching starting and ending point
	const vec3 sphereCenter = vec3(uboCS.cameraPosition.x, -uboCS.earthRadius, uboCS.cameraPosition.z);

	vec3 startPos, endPos, fogRay;
	if(uboCS.cameraPosition.y < uboCS.sphereInnerRadius - uboCS.earthRadius)
	{
		RaySphereIntersection(uboCS.cameraPosition.xyz, worldDir, sphereCenter, uboCS.sphereInnerRadius, startPos);
		RaySphereIntersection(uboCS.cameraPosition.xyz, worldDir, sphereCenter, uboCS.sphereOuterRadius, endPos);
		fogRay = startPos;
	}
	else if(uboCS.cameraPosition.y > uboCS.sphereInnerRadius - uboCS.earthRadius && uboCS.cameraPosition.y < uboCS.sphereOuterRadius - uboCS.earthRadius)
	{
		startPos = uboCS.cameraPosition.xyz;
		RaySphereIntersection(uboCS.cameraPosition.xyz, worldDir, sphereCenter, uboCS.sphereOuterRadius, endPos);
		bool hit = RaySphereIntersection(uboCS.cameraPosition.xyz, worldDir, sphereCenter, uboCS.sphereInnerRadius, fogRay);
		if(!hit)
		{
			fogRay = startPos;
		}
	}
	else 
	{
		RaySphereIntersection(uboCS.cameraPosition.xyz, worldDir, sphereCenter, uboCS.sphereOuterRadius, startPos);
		RaySphereIntersection(uboCS.cameraPosition.xyz, worldDir, sphereCenter, uboCS.sphereInnerRadius, endPos);
		fogRay = startPos;
	}

	// compute fog amount and early exit if over a certain value
	float fogAmount = ComputeFogAmount(fogRay, 0.00006);
	if(fogAmount > 0.965)
	{
		imageStore(outFragColor, fragCoord, backgroundColor);
		imageStore(outBloom, fragCoord, backgroundColor);
		imageStore(outAlphaness, fragCoord, vec4(0.0));
		imageStore(outCloudDistance, fragCoord, vec4(1.0));
		return;
	}

	RaymarchToCloudResult raymarchResult = RaymarchToCloud(startPos, endPos, backgroundColor.rgb);

	raymarchResult.color.rgb = raymarchResult.color.rgb * 1.8 - 0.1; // contrast-illumination tuning
    raymarchResult.color.rgb = mix(raymarchResult.color.rgb, backgroundColor.rgb * raymarchResult.color.a, clamp(fogAmount, 0.0, 1.0));

	// add sun glare to clouds
	float sun = clamp(dot(uboCS.lightDirection.xyz, normalize(endPos - startPos)), 0.0, 1.0);
	vec3 s = 0.8 * vec3(1.0, 0.4, 0.2) * pow(sun, 256.0);
	raymarchResult.color.rgb += s * raymarchResult.color.a;

	// blend clouds and background
	backgroundColor.rgb = backgroundColor.rgb * (1.0 - raymarchResult.color.a) + raymarchResult.color.rgb;
	backgroundColor.a = 1.0;

	vec4 bloomColor = vec4(GetSunColor(worldDir, 128) * 1.3, 1.0);

	float cloudAlphaness = clamp(raymarchResult.color.a, 0.2, 1.0);
	vec4 alphaness = vec4(cloudAlphaness, 0.0, 0.0, 1.0);
	if(cloudAlphaness > 0.1) // apply fog to bloom buffer
	{
		float fogAmount = ComputeFogAmount(startPos, 0.00003);
		vec3 cloud = mix(vec3(0.0), bloomColor.rgb, clamp(fogAmount, 0.0, 1.0));
		bloomColor.rgb = bloomColor.rgb * (1.0 - cloudAlphaness) + cloud.rgb;
	}

	vec4 fragColor = vec4(backgroundColor.rgb, 1.0);
	vec4 depth = vec4(ComputeDepth(raymarchResult.position), 0.0, 0.0, 0.0);

	imageStore(outFragColor, fragCoord, fragColor);
	imageStore(outBloom, fragCoord, bloomColor);
	imageStore(outAlphaness, fragCoord, alphaness);
	imageStore(outCloudDistance, fragCoord, depth);
}
