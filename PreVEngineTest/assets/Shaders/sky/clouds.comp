#version 450

layout (local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

layout(std140, binding = 0) uniform UniformBufferObject {
    vec4 outputTextureSize;
    vec4 seed;
    float perlinAmplitude;
    float perlinFrequency;
    float perlinScale;
    int perlinOctaves;
} uboCS;

layout (rgba8, binding = 1) uniform image2D outWeatherTexture;

float Random2D(in vec2 st)
{
    return fract(sin(dot(st.xy, vec2(12.9898, 78.233) + uboCS.seed.xy)) * 43758.5453123);
}

float NoiseInterpolation(in vec2 iCoord, in float iSize)
{
	vec2 grid = iCoord * iSize;
    vec2 randomInput = floor(grid);

    float p0 = Random2D(randomInput);
    float p1 = Random2D(randomInput + vec2(1.0, 0.0));
    float p2 = Random2D(randomInput + vec2(0.0, 1.0));
    float p3 = Random2D(randomInput + vec2(1.0, 1.0));

    vec2 gridFraction = fract(grid);
    vec2 weights = smoothstep(vec2(0.0, 0.0), vec2(1.0, 1.0), gridFraction);

    return p0 + (p1 - p0) * (weights.x) + (p2 - p0) * (weights.y) * (1.0 - weights.x) + (p3 - p1) * (weights.y * weights.x);
}

float PerlinNoise(in vec2 uv, in float sc, in float f, in float a, in int o)
{
    float noiseValue = 0.0;
    float localAmplitude = a;
    float localFrequency = f;
    for(int index = 0; index < o; ++index)
    {
        noiseValue += NoiseInterpolation(uv, sc * localFrequency) * localAmplitude;
        localAmplitude *= 0.25;
        localFrequency *= 3.0;
    }
	return noiseValue * noiseValue;
}

void main()
{
    ivec2 pixel = ivec2(gl_GlobalInvocationID.xy);

    vec2 uv = vec2(pixel) / uboCS.outputTextureSize.xy;
	vec2 suv = uv + vec2(5.5, 5.5);

	float cloudType = clamp(PerlinNoise(suv, uboCS.perlinScale * 3.0, 0.3, 0.7, 10), 0.0, 1.0);

	float coverage = PerlinNoise(uv, uboCS.perlinScale, uboCS.perlinFrequency, uboCS.perlinAmplitude, uboCS.perlinOctaves);
	vec4 weather = vec4(clamp(coverage, 0, 1), cloudType, 0, 1);

	imageStore(outWeatherTexture, pixel, weather);
}